Пропущенные данные в R: 
    Na                      - не доступно
    NaN                     - не число
    is.na()                 - функция проверки на пропущенные данные
    is.nan()                - функция проверки на NaN
    c<-0/0                  - NaN
    airquality[is.na(airquality)]       - пропущенные данные ?
    compale.cases()                     - сравнение двух векторов
        data <- data.frame(col1 = c(1, 2, NA, 4), col2 = c(2, NA, 4, 5), col3 = c(NA, 3, 5, 6))
        complete.cases(data) 
        # Результат: [1] FALSE FALSE FALSE  TRUE
    na.omit() - удаление пропущенных данных
        data <- data.frame(col1 = c(1, 2, NA, 4), col2 = c(2, NA, 4, 5), col3 = c(NA, 3, 5, 6))
        na.omit(data)
        # Результат: col1 col2 col3
        #            1    2    3
        #            4    5    6
    compale.cases(airquality) - функция возращает логический вектор который указывает, какие строки в детасете содержит полные данные
    airquality[complete.cases(airquality),] - удаление строк с пропущенными данными и возвращяет только те строки которые содержат полные данные
    na.omit(airquality) - удаление строк с пропущенными данными, которые содержат хотя бы одно пропущенное значение
    Пример кода: 
        # создание датафрейма с пропущенными значениями
        df <- data.frame(x = c(1, 2, NA, 4), y = c(5, NA, 7, 8))
        # вывод логического вектора, указывающего, какие строки содержат полные данные
        complete.cases(df)
        # [1]  TRUE FALSE FALSE  TRUE
        # фильтрация строк с полными данными
        df[complete.cases(df),]
        #   x y
        # 1 1 5
        # 4 4 8
        # удаление строк с пропущенными значениями
        na.omit(df)
        #   x y
        # 1 1 5
        # 4 4 8
    seq(from, to, by, length.out, along.with) - создает последовательность чисел
        seq(1, 10, 2) # 1 3 5 7 9
        seq(1, 10, length.out = 5) # 1 3 5 7 9
        seq(1, 10, length.out = 5, along.with = 1:10) # 1 3 5 7 9
        from - начальное значение 
        to - конечное значение
        by - шаг
        length.out - количество элементов в последовательности
        along.with - вектор, который определяет длину последовательности
        rep(x, times, length.out) - повторяет элементы вектора
    Пример кода:
        # Создание последовательности от 1 до 10 с шагом 1
        seq(1, 10, 1)
        # [1] 1 2 3 4 5 6 7 8 9 10
        # Создание последовательности от 0 до 1 с шагом 0.1
        seq(0, 1, 0.1)
        # [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0
        # Создание последовательности от 1 до 10 длиной 5
        seq(1, 10, length.out = 5)
        # [1]  1.00  3.25  5.50  7.75 10.00
        # Создание последовательности, длина которой соответствует длине другого объекта
        vec <- c(10, 20, 30, 40, 50)
        seq(along.with = vec)
        # [1] 1 2 3 4 5
    seq_along(x) - создает последовательность чисел, длина которой соответствует длине объекта x
    seq_len(n) - создает последовательность чисел, длина которой равна n


