getwd() 	- текущий каталог 
setwd() 	- изменить каталог
?команда 	- помощь 
CTRL+L		- очистить экран

Печать:
	cat("Wartość a=",a)
	cat("Wartość a=",a,sep="")
	paste("Hello", "world")
	paste("Hello", "world", sep = ", ")
		*paste() использует разделитель между строками, а 
		*paste0() объединяет строки без разделителя.
		
		*names <- c("Alice", "Bob", "Carol")
		*ages <- c(25, 30, 28)
		*paste(names, ages)
		*# Вывод: "Alice 25" "Bob 30" "Carol 28"
		*paste0(names, ages)
		*# Вывод: "Alice25" "Bob30" "Carol28"

Удаление переменной:
	rm(a)

Проверка и изминение типов:
	typeof(a) 	- определяет тип объекта a.
	class(a) 	- определяет класс объекта a.
	is.double(a) 	- проверяет, является ли объект a типом double
	as.double(a) 	- преобразует объект a в тип double 

Структуры данных:
	Векторы (Vector) - одномерные массивы, которые содержат элементы одного типа данных. 
	Векторы являются основным типом данных в R.
	Пример: c(1, 2, 3, 4, 5)

	Списки (Lists) - коллекции элементов разных типов данных. 
	Элементы списка могут быть векторами, другими списками или другими структурами данных.
	Пример: list(1, "text", c(1, 2, 3))

	Матрицы (Matrices) - двумерные массивы, состоящие из элементов одного типа данных. 
	Матрицы имеют фиксированное количество строк и столбцов.
	Пример: matrix(c(1, 2, 3, 4, 5, 6), nrow = 2, ncol = 3)

	Массивы (Arrays) - многомерные массивы, состоящие из элементов одного типа данных. 
	Массивы могут иметь произвольное количество измерений, определяемое пользователем.
	Пример: array(c(1, 2, 3, 4, 5, 6, 7, 8), dim = c(2, 2, 2))

	Рамки данных (Data.frames) - двумерные таблицы, в которых каждый столбец может содержать 		элементы разных типов данных, но все элементы внутри одного столбца должны быть одного типа. 
	Рамки данных являются основной структурой данных для работы с табличными данными в R.
	Пример: data.frame(Name = c("Alice", "Bob", "Carol"), Age = c(25, 30, 28), Weight = c(60, 75, 		65))
	
Векторы:
	коллекция элементов одного и того же атомарного типа
	v <- vector(режим, длина)
	v <- 1:4 - диапазоны
	v <- seq(1, 5, by = 0.5)
	v <- seq(1, 5, length = 5)
	v <- c(...) - combine - соединение/конкатенация

	встроенные постоянные векторы:
	• letters (строчные латинские буквы)
	• LETTERS (прописные латинские буквы)
	• month.abb (сокращенные названия месяцев)
	• month.name (полные названия месяцев)


Доступ:
	v, v[] - весь вектор
	v[indeks] - элемент в позиции индекс - индексация с 1!
	v[1:4] - диапазон элементов
	v[-index] - все элементы без выбранного
	v[-1:-4] - без диапазона
	v[v2] - когда v2 типа integer (целое число)
	v[v2] - когда v2 типа logical (логический тип)

	typeof( c(5, 5L) )
	typeof( c(5, "abc", 5L) )
	v <- vector("integer", 5), v[1:3] = TRUE
	v <- vector("integer", 5), v[1] = "abc"
	
Сравнение:
	identical(v1,v2)
	проверка длины:
		length(v)
		dim(v)                                           ----?
		проверка атомарного типа
		typeof(v)

	добавление элементов/удаление/модификация:
		v <- c(v, 5) 		-добавление пятерки в конец
		v <- c(v1, v2) 
		v <- v[-4], v <- v[-1:-4]
		v[3] <- 123 		-принудительное приведение
		
Списки:
	объекты, содержащие коллекции элементов различных типов - не только атомарных, 
	но и других списков
	
	создание:
	l <- list("Jan", "Nowak", 25, TRUE)
	pets <- c("кот", "собака")		list(..., pets)
	list(..., list("Maria", "Jerzy"))
	
	доступ:
	l, l[] - обращение к элементам списка l.
	l[1] - обращение к элементу списка l по индексу 1.
	l[[1]] - обращение к первому элементу списка l как к объекту.
	typeof(l[1]) - тип элемента списка l по индексу 1.
	
	l
	l$Imię
	l[["Imię"]] 	-то же самое 
	typeof(l[[1]]) - тип первого элемента списка l как объекта.
	
	модификация (Update):
	l[1] <- "Marian" 		- заменяет первый элемент списка l на строку "Marian".
	l$Nazwisko <- "Kowalski" 	- заменяет значение элемента с именем "Nazwisko" в списке l 
	на "Kowalski".
	l[colname] ... 		- заменяет значение элемента в столбце colname в списке l на  	 новое значение.

	операции со списками:
	добавление:
	l[length(l)+1] <- "Czestochowa"- добавляет строку "Czestochowa" в конец списка l.
	l <- c(l,"Śląskie") 		- добавляет строку "Śląskie" в конец списка l.
	l$Kraj <- "Polska" 		- добавляет новый элемент с именем "Kraj" и значением 	"Polska" в список l.

	удаление:
	l$Kraj <- NULL 		- удаляет элемент с именем "Kraj" из списка l.

	объединение:
	l1<- ... , l2<- ... 		- объединяет два списка l1 и l2.
	l <- c(l1,l2) 			- создает новый список, объединяя l1 и l2.
	
Матрицы:
	Векторы с дополнительной размерностью - это векторы, которые содержат дополнительную
	информацию в каждом элементе, помимо его значения.
	Эта информация может быть представлена в виде дополнительного числа или объекта, 
	который ассоциируется с каждым элементом вектора.



примеры создания матриц:
	m<-matrix(dane, nrow=IL_WIERSZY, ncol=IL_KOLUMN) 	- создание матрицы с заданным
								количеством строк и столбцов.
	m<-matrix(1:12, 4,3) 					- создание матрицы из
								последовательности чисел от 1 до 12
								с 4 строками и 3 столбцами.
	m<-matrix(1:12, nrow=4) | matrix(1:12, ncol=3) 	- создание матрицы с заданным
								количеством строк или столбцов, 
								если один из параметров не задан.
	m<-matrix(1:12, nrow=5) 				- создание матрицы с 5 строками, что
								приведет к предупреждению, так как
								общее количество элементов в матрице
								не будет кратно количеству строк.
	m<-matrix(1:12, 3,5) 					- создание матрицы с 3 строками и 5
								столбцами, что приведет к
								предупреждению, так как общее
								количество элементов в матрице не
								будет кратно количеству столбцов.
	m<-matrix("Hej",3,5) 					- создание матрицы из элементов,
								содержащих строку "Hej", с 3 
								строками и 5 столбцами.







